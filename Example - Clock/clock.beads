beads 1 program clock  --  a simple analog clock, drawn with lines
//  a simple analog clock
//  written by edj 2019
//  Copyright and related rights waived

const GRAD1 : a_gradient = { grad_shape:LINEAR_GRADIENT, grad_angle:GRAD_TO_BOTTOM, 
		grad_stops:[ { stop_pos:0, stop_color:CHOCOLATE },
				     { stop_pos:48, stop_color:BEIGE },
					 { stop_pos:52, stop_color:BEIGE },
					 { stop_pos:100, stop_color:CHOCOLATE }] }

var g : a_date	--  the current calendar date, this record defined in std library
var is_paused = N
var g_alarm : record
	nseconds
	id

===================
calc main_init
	//  set up a never ending callback to 'do_tick' every second, starting immediately
	loom_timer(do_tick, delay:0 sec, interval:1 sec, reps:INFINITY)

===================
calc do_tick -- is called once a second
	//  set our state variable g which will cause redraw to happen automatically
	merge seconds_to_date() ===> g  --  take our local clock in epoch seconds and convert to the date/time in our local city

===================
draw main_draw
	//  fill the screen with a background color
	draw_rect(grad:GRAD1)

	//  to allow rewind before init, ignore draw if hour is U
	//if g.date_hour == U
	//	return

	//  calculate the size of the clock box, by taking 80% of the smaller of the total width and height
	var diameter ‚áê 0.8*min(b.box.width, b.box.height)

	//  calculate a square centered on the screen
	var area : a_rect <=== solve_rect(basis:b.box, pin:MID_CENTER, width:diameter, height:diameter, round:Y)
	
	//  indent from the total screen size, set coordinate origin at the middle of the box
	layer area:area, origin:5 d_clock(diameter)

	if g_alarm.nseconds > 0
		var foot <=== solve_rect(basis:b.box, pin:8, height:20 pt)
		draw_str(to_str(g_alarm.nseconds), box:foot, size:0.6, color:WHITE)

===================
draw d_clock(
	diameter
	) -----
	draw_circle( x:0, y:0, fill:GREEN, diam:diameter, color:DARK_GREEN, thick:4 pt, pos:0)

	//  sweep hour hand
	draw_line( x1:0, y1:0, color:BROWN, angle:(g.date_hour + g.date_minute/60)*30 - 90 deg, len:diameter*0.30, thick:8 pt)

	//  sweep minute hand
	draw_line( x1:0, y1:0, color:ORANGE, angle:(g.date_minute + g.date_second/60)*6 - 90 deg, len:diameter*0.40, thick:6 pt)

	//  second hand (will jump because we only update once per second)
	draw_line( x1:0, y1:0, color:BLUE, angle:g.date_second*6 - 90 deg, len:diameter*0.45, thick:4 pt)
----------------------
track EV_KEYBOARD
	//  spacebar will toggle stopping time
	if e.keycode == KEYCODE_SPACE
		toggle is_paused
		if is_paused
			set_clock_scale(0)
		else
			set_clock_scale(1)
		return Y
	elif e.unicode == "a"
		//  set alarm
		g_alarm.nseconds = 4
		log "--- starting countdown"
		g_alarm.id = loom_timer(do_countdown, delay:1 sec, interval:1 sec, reps:4)
		return Y
	return N // we don't use this key, let the debugger have it

===================
calc do_countdown
	log "--- countdown {g_alarm.nseconds}"
	dec g_alarm.nseconds

