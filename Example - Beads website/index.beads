beads 1 program index  lang:LANG_ENG,LANG_JAP,LANG_AMH

//  example of how to build a website in Beads
//  written Sept 2020

assets local:"./art/" remote:"http://beadslang.com/beads/projects/website/art/"
	//file:"click.mp3" label:CLICK
	//file:"beep.mp3" label:BEEP
	file:"Beads_d.jpg" label:ICON_BEADS width:674 height:265 preload // aspect 2.54
	file:"logo_osx.jpg" label:ICON_OSX
	file:"logo_windows.jpg" label:ICON_WIN
	file:"outputs.png" label:DIAGRAM_OUTPUT
	file:"Mandala.png" label:TILE_MANDALA width:128 height:128
	file:"Mandala_beige.gif" label:TILE_MANDALA2 width:128 height:128
	file:"icon_refman.png" label:ICON_REFMAN
	file:"icon_refcard.png" label:ICON_REFCARD
	file:"icon_youtube.png" label:ICON_YOUTUBE
	
	------ icons for examples
assets local:"./art/examples/" remote:"http://beadslang.com/beads/projects/website/art/"
	file:"website.gif" label:ICON_WEBSITE
	file:"chess.png" label:ICON_CHESS
	file:"snake_animated.gif" label:ICON_SNAKE
	file:"bearsweeper.png" label:ICON_BEAR
	file:"calculator.gif" label:ICON_CALCULATOR
	file:"colorchart.png" label:ICON_COLOR
	file:"localize_screenshot.gif" label:ICON_LOCALIZE
	file:"animate3.gif" label:ICON_ANIMATE3

assets local:"./art/flags/" remote:"http://beadslang.com/beads/projects/website/art/"
	file:"Japan.png" label:ICON_JAP preload
	file:"ethiopia.png" label:ICON_AMH preload
	file:"USA.png" label:ICON_ENG preload

record a_example
	icon : image
	label : str
	code_url : str
	run_url  : str
		
record a_particle
	pos : a_xy  //  position
	vel : a_xy  //  velocity
	dir : a_xy  //  direction multiplier (+1 / -1)
	color : color

record a_tab_group --  data for a set of mutually exclusive tabs
	selected : num  --  current mode that is active (SHOW_CODE, etc.)
	back : color
	fore : color
	
const
	TRACE = N	//  general tracing
	TRACE_DEV = N  // trace device width
	TRACE_LOGG = N  // iPad debugger

	ANIMATE = Y

	TAB_HEIGHT ‚áê 23  --  height of window tabs
	TAB_WIDTH  ‚áê 100 --  width of tabs
	TAB_CORNER ‚áê 10  -- corner of tab
	TAB_GAP ‚áê 4  -- space between tabs

	//  colors
	DEAD = WHITE
	C_TAB_BACK ‚áê #28224d // #20242d
	C_TAB_FORE ‚áê #edeff3

	END_MARKER = "‚ùñ     ‚ùñ     ‚ùñ     ‚ùñ     ‚ùñ"
	CODE_PREFIX = "http://github.com/magicmouse/beads-examples/tree/master/"
	RUN_PREFIX = "http://beadslang.com/apps/"

	LANG_SUPPORTED = [LANG_ENG, 
		LANG_AMH, 
		LANG_JAP]
	LANG_ICONS = { LANG_ENG:ICON_ENG, 
		LANG_AMH:ICON_AMH, 
		LANG_JAP:ICON_JAP }

	EXAMPLES : array of a_example <=== [<
		label				icon			code_url		run_url
		"Beads website"		ICON_WEBSITE	"Example - Beads website"	U
		"Localizer"			ICON_LOCALIZE	"Example - Localization tool"	"https://youtu.be/ct_RSML_0D0"
		"Chess game"		ICON_CHESS		"Example - Chess"  "chess/chess.html"
		"Color picker"		ICON_COLOR		"Example - Color Chart" "colorchart/colorchart.html"
		"Snake game"		ICON_SNAKE		"Example - Snake"  "snake/snake.html"
		"Minesweeper game"	ICON_BEAR		"Example - Bearsweeper"  "bearsweeper/bearsweeper.html" 
		"Animation #3"		ICON_ANIMATE3	"Example - Animate3"	"animate3/animate3.html"
		"Calculator"		ICON_CALCULATOR	"Example - Calculator"	"calculator/calculator.html"
		>]

	N_EXAMPLES = tree_count(EXAMPLES)

	MIN_DEV_PTS = 160

enum
	//  tabs for main_tabs
	TAB_HOME
	TAB_EXAMPLES
	TAB_DOCS
	TAB_DOWNLOAD
	TAB_CONTACT

var g : record
	curr_lang  -- which language is website running in
	main_tabs : a_tab_group
	mobile : yesno

var
	//--- used for canvas animation
	mycanvas : a_canvas  -- our canvas bitmap that we draw into
	NP notrack = 0 -- current number of particles
	particles notrack : array of a_particle
	DEVICE_PTS

==================================
calc main_init
	g.curr_lang = LANG_ENG
	g.main_tabs <=== { selected:TAB_HOME, back:C_TAB_BACK, fore:C_TAB_FORE}

	//  update the particles 30 times a second
	if ANIMATE 
		loom_timer(do_particle_tick, rate:30, delay:0.2 sec, reps:10000)

==================================
vert slice main_draw
	if g.mobile
		//  draw in one column
		const ROW1V = min(bb.height/8, 15 pt)
		const ROW2V = min(bb.height/8, 15 pt)
		add ROW1V px mob_head1
		add ROW2V px d_tabs
		add (round(1 pt)) px
			draw_rect(fill:GRAY8)
		add 10 al d_body  // scrolling content
	else
		const HEADER_V = min(bb.height/6, 46 pt)
		add HEADER_V px d_header
		add 10 al d_body

	if TRACE_LOGG
		//  add our debugging console
		add 10 al $log

==================================
//  if we activate this special block name, the runtime log() function will draw into it
vert scroll $log  //  magic name for debugging on iPad
	nop

-----------------------
track EV_RESIZE	
	DEVICE_PTS = dots_to_pt(bb.width)
	//log "EV_RESIZE: width={bb.width}, pts={DEVICE_PTS}"

	//  small phones are not going to be able to hold all the tab across nicely
	//  the iphone XR in landscape is 812 x 375 pixels @ 192 dpi, 272 points across
	//  in portrait, it is 375 x 619 @ 192 dpi, 141 points across
	g.mobile = DEVICE_PTS < MIN_DEV_PTS

==================================
horz slice mob_head1
	add 30 al d_home_icon
	add 40 al d_lang_picker

==================================
horz slice d_header
	const ICON_H = min(bb.width/4, bb.height*2.54)
	add ICON_H px d_home_icon
	add 10 al d_tab_area

==================================
draw d_home_icon
	draw_image(ICON_BEADS)
track EV_TAP
	g.main_tabs.selected = TAB_HOME

==================================
vert slice d_tab_area
	add 10 al d_lang_picker
	skip 2 pt
	add 14 al d_tabs
	add (round(1 pt)) px
		draw_rect(fill:GRAY8)

==================================
horz slice d_lang_picker
	if TRACE_DEV
		add 80 pt
			draw_str("{runtime.screen_horz} pt:{dots_to_pt(runtime.screen_horz)} {runtime.window_horz} pt:{dots_to_pt(runtime.window_horz)}", size:0.5)
	skip 20 al
	loop across:LANG_SUPPORTED val:langx count:ix
		if ix > 1
			skip 6 pt
		add 50 pt d_lang(langx)
	if not g.mobile
		skip 18 pt

==================================
draw d_lang (
	langx
	) ------
	var back : color = if g.curr_lang == langx then PALE_TURQUOISE else WHITE_SMOKE
	draw_rect(fill:back, corner:bb.height*0.25, thick:1, pos:0, color:GRAY3)
	
	//  draw the icon
	var icon : image = LANG_ICONS[langx]
	draw_image(icon, indent:0.1 pt)
track EV_TAP
	//  we are changing the interface language
	g.curr_lang = langx

	//  we don't bother localizing for UK, but still show the flag.
	var ui_lang = if langx == LANG_ENK then LANG_ENG else langx
	set_ui_language(ui_lang)
		
==================================
horz slice d_tabs
	skip 20 al
	add TAB_WIDTH pt d_tab_control(g.main_tabs, "Home"[1000], TAB_HOME)
	skip 4 al
	skip 2 pt
	add TAB_WIDTH pt d_tab_control(g.main_tabs, "Examples"[1001], TAB_EXAMPLES)
	skip 4 al
	skip 2 pt
	add TAB_WIDTH pt d_tab_control(g.main_tabs, "Docs"[1002], TAB_DOCS)
	skip 4 al
	skip 2 pt
	add TAB_WIDTH pt d_tab_control(g.main_tabs, "Download"[1003], TAB_DOWNLOAD)
	skip 4 al
	skip 2 pt
	add TAB_WIDTH pt d_tab_control(g.main_tabs, "Contact"[1004], TAB_CONTACT)
	skip 20 al

==================================
draw d_body
	//draw_rect(fill:GRAY2)

	case g.main_tabs.selected
	| TAB_HOME
		d_home

	| TAB_EXAMPLES
		d_examples

	| TAB_DOCS
		d_docs

	| TAB_DOWNLOAD
		d_download

	| TAB_CONTACT
		d_contact


const 
	MIN_GAP = 14
	EXAMPLE_H = 260
	EXAMPLE_V = EXAMPLE_H / 1.5

	TITLE_V = 24

==================================
 
const p_future = """[html]
Beads is a new language, that aims 
straight into the future, where the computer does more of the work of programming. 
Beads uses strong typing protections to catch mistakes at compile time. Time travel facilitates testing and makes unreproducible
bugs a thing of the past."""

const p_simple = """[html]
This website was coded in Beads, without writing any CSS, HTML, or JS. Imagine using just one language for client, server, web apps, 
desktop and mobile. No more 
complex frameworks with thousands of API calls üëç . One concise notation, designed
for professionals to express their intentions with a minimum of fuss."""

const p_powerful = """[html]
Starting with a graph database as the fundamental data structure 
(think Neo4J), we add 
a proportion based layout system, more convenient than SwiftUI. Build for a 
wide range of targets and application types. Full support for  
internationalization."""

const p_robust = """[html]
Beads has super-strong type checking, but does it via implied typing 
so you spend your time
focusing on your project, not fussing with type declarations. With a closed, protected arithmetic that cannot
crash, programs are resilient when given bad inputs. The unique 
"Black Box" feature allows you to replay client sessions, so every reported error can be reproduced."""

const p_elegant = """[html]
There are many beautiful things in the Beads language. 
Regular Expression syntax has been completely redesigned to make them easier to maintain. There is a good 
balance between conciseness and reading comprehension. No complex abstractions like monads or functors."""

const p_whatnot = """[html]
Beads can make websites, web apps, mobile apps, but Beads is not intended for machine learning, big data, or embedded systems. 
It does not connect well to other languages, as the time travel feature requires tight integration. 
It is currently only a 2D system. In the first version the compiler is only available for Windows and Macintosh, but you can build web apps for Linux."""

horz slice d_home
	const W = min(bb.width, 650 pt)

	skip 10 al
	add W px d_home2
	skip 10 al

	if g.mobile <> Y
		particle_canvas_resize(bb)
		layer area:bb canvas:mycanvas

vert scroll d_home2
	under
		draw_rect(box:b.boxtot, fill:WHITE, opacity:0.88)

	const GAP = if g.mobile then 8 else 24

	skip (GAP/2) pt
	add TITLE_V pt d_title("üî®   " & "SIMPLE"[1006])
	add auto d_text(p_simple)
	skip GAP pt

	add TITLE_V pt d_title("üöÄ   " & "FUTURISTIC"[1005])
	add auto d_text(p_future)
	skip GAP pt

	add TITLE_V pt d_title("üí™   " & "POWERFUL"[1007])
	add auto d_text(p_powerful)
	skip GAP pt

	add TITLE_V pt d_title("üí£   " & "ROBUST"[1008])
	add auto d_text(p_robust)
	skip GAP pt

	add TITLE_V pt d_title("üíé   " & "ELEGANT"[1009])
	add auto d_text(p_elegant)
	skip GAP pt

	add TITLE_V pt d_title("‚ö†Ô∏è   " & "LIMITATIONS"[1010])
	add auto d_text(p_whatnot)
	skip GAP pt

	add 12 pt
		//   by putting the marker at the top, we are devoting a little space afterwards
		//   that makes the scrolling look a little nicer
		draw_str(END_MARKER, size:8 pt, vert:0, color:GRAY8)

horz slice d_title (
	prompt : str
	)
	//under
	//	draw_rect(fill:WHITE, opacity:0.10)

	const VINDENT = if g.mobile then 6 else 20

	skip VINDENT pt
	add 10 al
		draw_str(prompt, just:LEFT, size:0.7, bold:Y, color:REBECCA_PURPLE, sel:Y)
	skip 10 pt

draw d_text (
	msg : str
	) ------
	//draw_rect(fill:WHITE, opacity:0.40)

	//  subtract the area needed for the scrollbar
	const RI = if g.mobile then 4 else 20
	var r <=== solve_rect(basis:bb, width:bb.width-(RI pt))
	if g.mobile
		draw_str(msg, box:r, size:8 pt, just:LEFT, vert:0, indent:3 pt, wrap:Y, font:SERIF, sel:Y)
	else
		draw_str(msg, box:r, size:12 pt, just:LEFT, vert:0, indent:20 pt, wrap:Y, font:SERIF, sel:Y)

==================================
grid d_examples
	horz slice
		const NCOL = max(1, round_down(bb.width/(EXAMPLE_H pt + MIN_GAP pt)))

		skip 10 al
		skip MIN_GAP pt
		loop reps:NCOL
			add EXAMPLE_H pt
			skip MIN_GAP pt
			skip 10 al
		//  we gotta leave space for scrollbar on the right
		skip 20 pt

	vert scroll
		if g.mobile
			//  mobile form
			const MEXV = min(bb.height/2, 70 pt)
			loop reps:N_EXAMPLES
				skip 10 pt
				add MEXV px
		else
			//  desktop form
			const NROW = round_up(N_EXAMPLES / NCOL)
			var xv = (20+MIN_GAP) pt
			skip xv px
			loop reps:NROW
				add EXAMPLE_V pt
				skip MIN_GAP pt
				skip 20 pt
				(EXAMPLE_V + MIN_GAP + 20) pt +=> xv
		
	under
		//  we can't overdraw the SVG box, so we must change the runtime to calc
		//  bounding box of a block when it is a scroll box to be the total content size
		//  future: have the runtime consider the bbox to be the total bbox after scrolling calc
		//  since this is a scrolling thing, draw past the bottom
		//var r <=== solve_rect(basis:bb, pin:2, height:xv)
		draw_rect(box:b.boxtot, tile:TILE_MANDALA)

	cell
		//  in the case of multiple column layouts, we may go past the number of examples
		if b.cell_seq <= N_EXAMPLES
			d_example_cell(b.cell_seq)

================================
vert slice d_example_cell (
	cellx
	) -----
	const TITLEV = if g.mobile then 10 else 20
	const FOOTV = if g.mobile then 10 else 22

	add TITLEV pt
		draw_str(EXAMPLES[cellx].label, size:0.7)
	add 10 al d_ex_image(cellx)
	skip 4 pt
	add FOOTV pt d_ex_footer(cellx)
		
================================
draw d_ex_image ditto
	if EXAMPLES[cellx].icon == U
		draw_rect(fill:PINK, corner:10 pt)
	else
		draw_image(EXAMPLES[cellx].icon)

================================
horz slice d_ex_footer ditto
	skip 2 al
	add 100 pt draw_oneshot("View code"[1011], html_redirect(gen_code_url(cellx), newtab:Y)) 
	skip 10 al
	skip 4 pt

	if EXAMPLES[cellx].run_url<>U
		if is_video(EXAMPLES[cellx].run_url)
			add 100 pt draw_oneshot("Movie"[1012], html_redirect(gen_run_url(cellx), newtab:Y), back:KHAKI)
		else
			add 100 pt draw_oneshot("Run"[1013], html_redirect(gen_run_url(cellx), newtab:Y))
	else
		skip 100 pt

	skip 2 al

calc is_video (
	url : str
	) : yesno
	return str_pos(url, "youtu") <> U

================================
calc gen_code_url (
	ix  -- example index 
	) : str
	return CODE_PREFIX & EXAMPLES[ix].code_url

================================
calc gen_run_url (
	ix  -- example index 
	) : str
	var prefix : str = ""
	if str_begins(EXAMPLES[ix].run_url, "http") <> Y
		//  prepend
		prefix = RUN_PREFIX
	return prefix & EXAMPLES[ix].run_url

================================
vert slice d_contact
	under
		draw_rect(tile:TILE_MANDALA)

	skip 5 al
	add 20 pt 
		draw_str("Please visit our friendly Beads chat room:", size:18 pt, color:GRAY7)
	skip 15 pt
	add 28 pt d_jump_discord
	skip 5 al
	skip 20 pt
	add 20 pt 
		draw_str("Send email inquiries to info@beadslang.com:", size:18 pt, color:GRAY7)
	skip 15 pt
	add 28 pt d_jump_email
	skip 20 al

================================
horz slice d_jump_discord
	skip 5 al
	const BUTTH = if g.mobile then bb.width*0.6 else min(bb.width/2.5, 150 pt)
	add BUTTH px draw_oneshot("visit Discord", html_redirect("https://discord.gg/pTAdsSW", newtab:Y))
	skip 5 al

================================
horz slice d_jump_email
	skip 5 al
	const BUTTH = if g.mobile then bb.width*0.6 else min(bb.width/2.5, 150 pt)
	add BUTTH px draw_oneshot("E-mail", html_redirect("mailto:info@beadslang.com?subject=Beads%20language", newtab:Y))
	skip 5 al
	
================================
const 
	//  size of the box in points for the icons
	REFMAN_H = 180

vert slice d_docs
	under
		draw_rect(tile:TILE_MANDALA2)
	const REFMAN_V = min(bb.height/6, 154 pt)

	skip 5 al
	add 24 pt
		draw_rect(fill:WHITE, opacity:0.2, corner:8 pt)
		draw_str("Documentation for Beads language", size:18 pt, color:GRAY8)
	skip 5 al
	skip 4 pt
	add REFMAN_V px d_refman_row
	skip 8 al
	skip 4 pt
	add REFMAN_V px d_refcard_row
	skip 8 al
	skip 4 pt
	add REFMAN_V px d_video_row
	skip 5 al
	skip 8 pt

================================
horz slice d_video_row
	skip 10 al
	add REFMAN_H pt
		draw_image(ICON_YOUTUBE, corner:4 pt)
	skip 2 al
	add 140 pt d_doc_butts("https://www.youtube.com/channel/UCiBO5hr2IVsYK8wiLznImTQ/")
	skip 10 al
	
=================================
horz slice d_refman_row
	skip 10 al
	add REFMAN_H pt
		draw_image(ICON_REFMAN, corner:4 pt)
	skip 2 al
	add 140 pt d_doc_butts("http://beadslang.com/downloads/refman.pdf")
	skip 10 al
	
================================
horz slice d_refcard_row
	skip 10 al
	add REFMAN_H pt
		draw_image(ICON_REFCARD, corner:4 pt)
	skip 2 al
	add 140 pt d_doc_butts("http://beadslang.com/downloads/beads_reference_card.pdf")
	skip 10 al

================================
vert slice d_doc_butts (
	url : str
	)
	const BUTTV = if g.mobile then 15 else 30
	skip 10 al
	add BUTTV pt draw_oneshot("View"[1014], html_redirect(url, newtab:Y))
	skip 10 al
	//add 30 pt draw_oneshot("Download"[1003], html_download(url))
	//skip 10 al
	
================================
vert slice d_download
	under
		draw_rect(tile:TILE_MANDALA2)

	skip 5 al
	add 32 pt
		draw_str("Beads SDK Version 0.132\n82 MB download, cross-platform", size:18 pt, color:GRAY7)
	skip 5 al
	add 80 pt d_osx_row
	skip 8 al
	add 80 pt d_win_row
	skip 10 al
	add 180 pt
		draw_image(DIAGRAM_OUTPUT)
		//draw_rect(color:PINK, thick:2)
	skip 20 al
	
================================
horz slice d_osx_row
	skip 10 al
	add 200 pt
		draw_image(ICON_OSX, corner:4 pt)
	skip 5 al
	add 140 pt d_download_butt("Download"[1003], "http://www.beadslang.com/downloads/beads.zip")
	skip 10 al
	
================================
horz slice d_win_row
	skip 10 al
	add 200 pt
		draw_image(ICON_WIN, corner:4 pt)
	skip 5 al
	add 140 pt d_download_butt("Download"[1003], "http://www.beadslang.com/downloads/beads.zip")
	skip 10 al

================================
vert slice d_download_butt (
	prompt : str
	url : str
	)
	const BUTTV = if g.mobile then 14 else 28

	skip 10 al
	add BUTTV pt draw_oneshot(prompt, html_download(url))
	skip 10 al

====================
draw draw_oneshot (
	label : str
	action : calc(frozen)
	back : color = POWDER_BLUE
	)
	const THICK = min(bb.height/15, 1.5 pt)
	draw_rect(fill:back, thick:THICK, color:DARK_ORCHID, corner:bb.height/3.5, pos:0)
	draw_str(label, size:0.65, indent:3 pt, color:BLACK)
-----
track EV_TAP
	action()

================================
draw d_tab_control(  --  tab handling component
	tab   : a_tab_group  --  info about the group this tab belongs to
	label : str  --  the label for this specific tab
	newsel: num  --  new selection to set if the user taps on this tab
	)
	//  draw the tab as a rounded rectangle with the top left and right corners rounded
	const CORNER = bb.height/3.8
	draw_rect(fill:tab.back, corner_tl:CORNER, corner_tr:CORNER)
	if tab.selected <> newsel
		//  this tab is not currently selected, make it slightly dead
		//opacity ‚áê 0.7
		draw_rect(fill:DEAD, opacity:0.4)
	if g.mobile
		draw_str(label, color:tab.fore, indent:1 pt, size:0.50) -- , opacity:opacity)
	else
		draw_str(label, color:tab.fore, indent:2.5 pt, size:0.65) -- , opacity:opacity)

---------------------
track EV_TAP
	//  if user clicks on this tab, make it the current selection
	tab.selected ‚áê newsel

==================================
//   Canvas animation with moving dots and lines
==================================

const
	DOT_COLOR = GRAY2
	DOT_RADIUS = 5

var 
	CANVAS_H
	CANVAS_V

=====================
calc particle_canvas_resize (
	box : a_rect
	)
=====================

	if box.width == CANVAS_H and box.height == CANVAS_V
		return  //  same size as before

	CANVAS_H = box.width
	CANVAS_V = box.height

	NP = min(round(CANVAS_H*CANVAS_V/6000), 100)
	log "-- resizing, NP={NP}" on:TRACE

	//  start a fresh set of random particles on any resize
	trunc particles
	loop reps:NP
		append { pos:{ x:random_range(0, CANVAS_H), y:random_range(0, CANVAS_V) }, 
				 vel:{ x:random_range(0.1, 2) y:random_range(0.1, 2) },
				 dir:{ x:random_set(-1, +1) y:random_set(-1, +1) },
				 color:random_color() } ===> particles index:ix

=====================
calc do_particle_tick  -- this is called by our timer to update the canvas buffer
=====================
	//  if we have fewer particles than we wanted, add some
	if g.main_tabs.selected <> TAB_HOME or g.mobile
		return

	//log "moving particles, NP={NP}"
	move_particles in mycanvas 
	render_particles in mycanvas 

=====================
canvas render_particles
=====================	
	//  all the drawing in this section is done via the canvas
	//  this will wipe out whatever was there before
	draw_rect(fill:#1C292D) // LIGHT_SLATE_GRAY)

	//  loop through all the particles
	loop across:particles index:ix1 ptr:particle
		//  draw the dot, used to be DOT_COLOR
		draw_circle(xy:particle.pos, fill:particle.color, radius:DOT_RADIUS)

		//  any particles near it will cause a line segment to be drawn
		loop from:ix1+1 to:NP index:ix2
			var d = distance(particle.pos, particles[ix2].pos)
			if d < 120
				//  the closer it gets the fainter it gets
				var opacity = interpolate(d, 0, 120, 0, 0.25)

				//  create a mid color between the 2 dots, used to be GRAY3 line
				var line_color = interpolate_color(50, 0, 100, particle.color, particles[ix2].color)
				draw_line(p1:particle.pos, p2:particles[ix2].pos, opacity:opacity, color:line_color, thick:3)

=====================
canvas move_particles
=====================
	//  loop through all the particles
	loop across:particles index:ix1 ptr:p1
		//  update the position
		p1.vel.x*p1.dir.x +=> p1.pos.x
		p1.vel.y*p1.dir.y +=> p1.pos.y

		//  if resize the playing field abruptly, particles will be way outside
		//  and it will take multiple movement steps to get them back in view
		if p1.pos.x <= 0
			p1.dir.x = +1 // force it to the right
		elif p1.pos.x >= bb.width
			p1.dir.x = -1 // force it to the left

		if p1.pos.y <= 0
			p1.dir.y = +1 // force it to the downward
		elif p1.pos.y >= bb.height
			p1.dir.y = -1 // force it to the upward

==================
calc interpolate_color ( --- interpolate between a range of colors
==================
	a_cur  --- input value
	a_min  --- minimum value
	a_max  --- maximum value
	color_min : color  --- color corresponding to minimum
	color_max : color  --- color corresponding to maximum
	) : color  --- interpolated color

	//  clamp the values to the ends of the range
	if a_cur <= a_min
		return color_min

	if a_cur >= a_max
		return color_max

	var hsv_min : a_hsv = color_to_hsv(color_min)
	var hsv_max : a_hsv = color_to_hsv(color_max)
	var targ_hue
	var targ_val
	var targ_sat

	//  now interpolate the values, hue is tricky
	var hue1 = hsv_min.hue
	var hue2 = hsv_max.hue
	if abs(hue1 - hue2) > 180
		//  shorter to go the other way around the circle
		if hue1 < hue2
			360 +=> hue1  //  bring it closer 
		else
			360 +=> hue2

	targ_hue = interpolate(a_cur, a_min, a_max, hue1, hue2)
	targ_sat = interpolate(a_cur, a_min, a_max, hsv_min.saturation, hsv_max.saturation)
	targ_val = interpolate(a_cur, a_min, a_max, hsv_min.value, hsv_max.value)

	//  convert back to RGB color
	var result = hsv(targ_hue, targ_sat, targ_val)
	return result
